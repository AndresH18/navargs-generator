namespace NavArgs.Abstractions.Tests;

public static class Constants
{
    public const string AccountDetailsWithoutRouteClass =
        """
        using NavArgs.Abstractions;

        namespace UserNamespace;

        [NavDestination]
        public partial class AccountDetails : INavDestination
        {
            public string Route { get; } = "account-details";
            public int Id { get; set };
            public string Name { get; set; }
            public string? Email { get; set; }
        }
        """;

    public const string ExpectedAccountDetailsWithoutRouteClass =
        """
        // <auto-generated/>
        #nullable enable
        using NavArgs.Abstractions;
        
        namespace UserNamespace
        {
            // <auto-generated/>
            [global::System.CodeDom.Compiler.GeneratedCode("NavArgs.Abstractions", "1.0.0.0")]
            partial class AccountDetails
            {
                public INavArgs GetArgs()
                {
                    return new AccountDetailsArgs(Id, Name, Email);
                }
        
                public global::System.Collections.Generic.IDictionary<string, object?> ToDictionary()
                {
                    return new global::System.Collections.Generic.Dictionary<string, object?>()
                    {[nameof(Id)] = this.Id, [nameof(Name)] = this.Name, [nameof(Email)] = this.Email};
                }
            }
        
            // <auto-generated/>
            [global::System.CodeDom.Compiler.GeneratedCode("NavArgs.Abstractions", "1.0.0.0")]
            public record AccountDetailsArgs(int Id, string Name, string? Email) : INavArgs
            {
                public static AccountDetailsArgs FromDictionary(global::System.Collections.Generic.IDictionary<string, object> dictionary)
                {
                    var vId = (int)dictionary[nameof(Id)];
                    var vName = (string)dictionary[nameof(Name)];
                    var vEmail = default(string);
                    if (dictionary.TryGetValue(nameof(Email), out var oEmail) && oEmail is string sEmail)
                        vEmail = sEmail;
                    return new AccountDetailsArgs(vId, vName, vEmail);
                }
            }
        }
        """;

    private const string s =
        """
        // <auto-generated/>
        #nullable enable
        using System;
        using System.Collections.Generic;
        using NavArgs.Abstractions;

        namespace UserNamespace
        {
            // <auto-generated/>
            [global::System.CodeDom.Compiler.GeneratedCode("NavArgs.Abstractions", "1.0.0.0")]
            partial class AccountDetails
            {
                public INavArgs GetArgs()
                {
                    return new AccountDetailsArgs(Id, Name, Email);
                }

                public IDictionary<string, object?> ToDictionary()
                {
                    return new Dictionary<string, object?>()
                    {[nameof(Id)] = this.Id, [nameof(Name)] = this.Name, [nameof(Email)] = this.Email};
                }
            }

            // <auto-generated/>
            [global::System.CodeDom.Compiler.GeneratedCode("NavArgs.Abstractions", "1.0.0.0")]
            public record AccountDetailsArgs(int Id, string Name, string Email) : INavArgs
            {
                public static AccountDetailsArgs FromDictionary(IDictionary<string, object> dictionary)
                {
                    var vId = (int)dictionary[nameof(Id)];
                    var vName = (string)dictionary[nameof(Name)];
                    var vEmail = (string)dictionary[nameof(Email)];
                    return new AccountDetailsArgs(vId, vName, vEmail);
                }
            }
        }
        """;
}