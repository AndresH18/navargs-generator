namespace NavArgs.Abstractions;

internal static class Constants
{
    internal const string Namespace = "NavArgs.Abstractions";
    internal const string NavAttributeName = "NavDestinationAttribute";
    internal const string IgnoreNavPropertyAttributeName = "IgnoreNavPropertyAttribute";
    internal const string NavInterfaceName = "INavDestination";
    internal const string ArgsInterfaceName = "INavArgs";

    internal const string NavAttributeFullName = $"{Namespace}.{NavAttributeName}";
    internal const string IgnoreNavPropertyAttributeFullName = $"{Namespace}.{IgnoreNavPropertyAttributeName}";
    internal const string NavInterfaceFullName = $"{Namespace}.{NavInterfaceName}";
    internal const string ArgsInterfaceFullName = $"{Namespace}.{ArgsInterfaceName}";

    internal const string NavAttributeSourceCode =
        $$"""
          // <auto-generated/>
          using System;

          namespace {{Namespace}};

          [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
          public class {{NavAttributeName}} : Attribute
          {
             public string Route { get; init; } = string.Empty;
          }
          """;
    
    internal const string IgnoreNavPropertyAttributeSourceCode =
        $$"""
          // <auto-generated/>
          using System;

          namespace {{Namespace}};

          [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)]
          public class {{IgnoreNavPropertyAttributeName}} : Attribute;
          """;

    internal const string NavInterfaceSourceCode =
        $$"""
          // <auto-generated/>
          namespace {{Namespace}};

          public interface {{NavInterfaceName}}
          {
               public string Route { get; }
               public INavArgs GetArgs();
          }
          """;

    internal const string ArgsInterfaceSourceCode =
        $$"""
          // <auto-generated/>
          using System.Collections.Generic;

          namespace {{Namespace}};

          public interface {{ArgsInterfaceName}}
          {
              IDictionary<string, object> ToDictionary();
          }
          """;
}